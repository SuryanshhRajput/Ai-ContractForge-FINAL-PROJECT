/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../common";
import type { SimpleCounter, SimpleCounterInterface } from "../SimpleCounter";

const _abi = [
  {
    inputs: [],
    name: "count",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decrement",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "increment",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052348015600f57600080fd5b506101008061001f6000396000f3fe6080604052348015600f57600080fd5b5060043610603c5760003560e01c806306661abd1460415780632baeceb714605b578063d09de08a146063575b600080fd5b604960005481565b60405190815260200160405180910390f35b60616069565b005b6061607d565b60008054908060768360a0565b9190505550565b60008054908060768360b4565b634e487b7160e01b600052601160045260246000fd5b60008160ac5760ac608a565b506000190190565b60006001820160c35760c3608a565b506001019056fea264697066735822122031760fb382ca7434318a4d312dc7656b83b5b76a1f342f7d7d7c9ebc3a55723664736f6c634300081c0033";

type SimpleCounterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SimpleCounterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SimpleCounter__factory extends ContractFactory {
  constructor(...args: SimpleCounterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      SimpleCounter & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): SimpleCounter__factory {
    return super.connect(runner) as SimpleCounter__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SimpleCounterInterface {
    return new Interface(_abi) as SimpleCounterInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): SimpleCounter {
    return new Contract(address, _abi, runner) as unknown as SimpleCounter;
  }
}
